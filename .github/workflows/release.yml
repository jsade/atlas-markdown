name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Ensure we're on the correct commit after merge
          ref: ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release build

      - name: Validate configuration
        run: |
          # Check if pyproject.toml exists and has required semantic-release config
          if [ ! -f "pyproject.toml" ]; then
            echo "ERROR: pyproject.toml not found"
            exit 1
          fi

          # Validate TOML syntax and version field
          python -c "
          import tomllib
          try:
              with open('pyproject.toml', 'rb') as f:
                  config = tomllib.load(f)
              if 'project' not in config or 'version' not in config['project']:
                  raise KeyError('Missing project.version in pyproject.toml')
              print(f'Current version: {config[\"project\"][\"version\"]}')
          except Exception as e:
              print(f'ERROR: {e}')
              exit(1)
          "

      - name: Run semantic release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Verify we're on main branch and have latest changes
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git log -1 --oneline)"

          # Get current version
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if release is needed
          echo "Checking if release is needed..."
          if semantic-release version --noop 2>&1 | grep -q "No release will be made"; then
            echo "No release needed"
            echo "released=false" >> $GITHUB_OUTPUT
          else
            echo "Performing release..."
            # Perform the actual release
            semantic-release version
            semantic-release publish

            # Verify the release was successful
            NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

            if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
              echo "Successfully released version $NEW_VERSION"
              echo "released=true" >> $GITHUB_OUTPUT
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "ERROR: Version unchanged after release attempt"
              echo "released=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Build distribution
        if: steps.release.outputs.released == 'true'
        run: |
          python -m build
          # Verify build artifacts were created
          if [ ! -d "dist" ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "ERROR: No distribution files were created"
            exit 1
          fi
          echo "Distribution files created:"
          ls -la dist/

      - name: Upload to GitHub Release
        if: steps.release.outputs.released == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Uploading to release: $LATEST_TAG"

          # Upload distribution files if they exist
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            gh release upload $LATEST_TAG dist/* --clobber
            echo "Successfully uploaded distribution files to release $LATEST_TAG"
          else
            echo "ERROR: No distribution files found to upload"
            exit 1
          fi
